module rom_ALUFN (
    input address[6],
    output element[6]
) {
    
    sig alu[6]
    
    always {
        case (address) {
            0: alu = 6b000000 // ADD
            1: alu = 6b000000 // ADD
            2: alu = 6b000001 // SUB
            3: alu = 6b000001 // SUB
            4: alu = 6b000001 // SUB
            5: alu = 6b000010 // MUL
            6: alu= 6b000010 // MUL
            7: alu= 6b000010 // MUL
            8: alu= 6b011000 // AND
            9: alu= 6b011000 // AND
            10: alu = 6b011000 // AND
            11: alu = 6b011110 // OR
            12: alu = 6b011110 // OR
            13: alu = 6b011110 // OR
            14: alu = 6b010110 // XOR
            15: alu = 6b010110 // XOR
            16: alu= 6b011010 // "A" or LDR
            17: alu= 6b100000 // SHL
            18: alu= 6b100000 // SHL
            19: alu= 6b100000 // SHL
            20: alu = 6b100001 // SHR
            21: alu = 6b100001 // SHR
            22: alu = 6b100011 // SRA
            23: alu = 6b110011 // CMPEQ
            24: alu = 6b110011 // CMPEQ
            25: alu = 6b110101 // CMPLT
            26: alu= 6b110101 // CMPLT
            27: alu= 6b110101 // CMPLT
            28: alu= 6b110111 // CMPLE
            29: alu= 6b110111 // CMPLE
            30: alu= 6b000011 // DIVIDE
            31: alu= 6b000101 // MODULO
            default: alu = 6b000000
        }
        element = alu
    }
}