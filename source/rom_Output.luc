module rom_Output (
    input address[6],
    output element[32]
) {
    
    sig out[32]
    
    always {
        case (address) {
      0: out = 32b00011110; // ADD: positive numbers, A=20, B=10, output=30
      1: out = 32b10000000000000000000000000000000; // ADD: overflow, A=MAX_VALUE(+ve), B=1, output=MIN_VALUE
      2: out = 32b00011001; // SUB: A=40, B=15, output=25
      3: out = 32b01111111111111111111111111111111; // SUB: check for underflow, A=MIN_VALUE, B=1, output=MAX_VALUE
      4: out = 32h80000100; // SUB: check Boundary Values(), A=0, B=0x7FFFFF00, output=negative of 0x7FFFFF00
      5: out = 32b01010100; // MUL: Positive values, A=12, B=7, output=84
      6: out = 32b00000000; // MUL: zero multiplication, A=25, B=0, output=0
      7: out = 32h6AAAAAAA; // MUL: multiplication by 1, A=0x6AAAAAAA, B=1, output=0x6AAAAAAA
      8: out = 32b00000000; // AND: with zero, A=60, B=0, output=0
      9: out = 32b00000000; // AND: with complements, A=85, B=-86, output=0
      10: out = 32b01100110; // AND: with ones, A=102, B=-1, output=102
      11: out = 32b01001010; // OR: with zeroes, A=74, B=0, output=74
      12: out = 32hFFFFFFFF; // OR: with ones, A=53, B=-1, output=-1 (MAX_VALUE)
      13: out = 32b00111111; // OR: with self, check for identity, A=63, B=63, output=63
      14: out = 32b01010110; // XOR: identity, A=86, B=0, output=86
      15: out = 32hFFFFFFFF; // XOR: complement, A=90, B=-91, output=MAX_VALUE (all ones)     
      16: out = 32b11001100; // LDR: output = A = 204
      17: out = 32b11001100; // SHL: zero shift, output = 204
      18: out = 32h80000000; // SHL: max shift, output = 32h80000000
      19: out = 32hA00000B0; // SHL: boundary, output = 0xA00000B0
      20: out = 32b01100100; // SHR: zero shift, output = 100
      21: out = 32b00000001; // SHR: max shift, output = 1
      22: out = 32hF9000000; // SRA: arithmetic shift, output = 0xF9000000
      23: out = 32b00000001; // CMPEQ: true, output = 1
      24: out = 32b00000000; // CMPEQ: false, output = 0
      25: out = 32b00000001; // CMPLT: true, output = 1
      26: out = 32b00000000; // CMPLT: false, output = 0
      27: out = 32b00000000; // CMPLT: false (equal), output = 0
      28: out = 32b00000001; // CMPLE: true, output = 1
      29: out = 32b00000000; // CMPLE: false, output = 0
      30: out = 32b00000010; // DIVIDE: A=16, B=8, output=2
      31: out = 32b00000001; // MODULO: A=17, B=4, output=1
      default: out = 32b0000000;
        }
        element = out;
    }
}